/***************************************\
*					*
*	Pylonscript by Kreuzung		*
*	Original von Hoppah		*
*	Verwendung mit ReadMeeintrag	*
*					*
\***************************************/
						//Diese 2 nicht ändern!
const char CMD_GETCONE[]			= "PcmdTrafficConeGet";
const char CMD_PLACECONE[]			= "PcmdTrafficConePlace";
const char OBJ_CONEGROUND[]			= "mod:Prototypes/Vehicles/Polizei/Pylon.e4p"; //Pylon-Prototyp
const char NAME_CONE[]				= "Cone"; //Name der Pylonen auf der Map
const char OBJ_CONE[]				= "Equipment/Pylon.V3O"; //Pylon-Modell, muss in mod:Models/Objects liegen!
						//Nicht ändern ab hier
const char DUMMY_CONE[]				= "DummyTrafficCone";
const char DUMMY_3CONES[]			= "Dummy3Cones";
const char DUMMY_2CONES[]			= "Dummy2Cones";
const char DUMMY_1CONE[]			= "Dummy1Cone";

int DummyGroup = 16;

object PcmdTrafficConeGet : CommandScript
{
	PcmdTrafficConeGet()
	{
    	SetIcon("trafficcone");
    	SetCursor("trafficcone");
		SetPriority(180);
		SetValidTargets(ACTOR_VEHICLE | ACTOR_OBJECT);
		SetGroupID(CGROUP_GETEQUIPMENT);
		SetPossibleCallers(ACTOR_PERSON);
	}

	bool CheckPossible(GameObject *Caller)
	{
		if(!Caller->IsValid() || Caller->GetType() != ACTOR_PERSON)
			return false;

		Person p(Caller);
		if (p.IsCarryingPerson() || p.IsLinkedWithPerson() || p.GetFirehoseID()!=0 || p.IsPulling())
			return false;

		if (p.IsCurrentAction("EActionTreatPerson"))
			return false;
		if (p.HasCommand (DUMMY_3CONES))
			return false;

		return true;
	}

	bool CheckTarget(GameObject *Caller, Actor *Target, int childID)
	{
		if(!Caller->IsValid() || !Target || !Target->IsValid() || Target->GetType()!=ACTOR_VEHICLE)
			return false;
		
		if(Caller->GetObjectType()==TYPE_PERSON)
		{
			Person p(Caller);
			Vehicle v(Target);
			if(p.IsLinkedWithPerson() || p.IsCarryingPerson() || p.IsEquipped() || p.IsPulling() || p.GetFirehoseID()!=0 || p.GetEnteredCarID() != -1) 
				return false;

			Vehicle v(Target);
			if (!v.IsDestroyed() && v.IsValid() && !v.IsDestroyed() && (v.IsFirefighter() || v.IsAmbulance() || v.IsThw() || v.IsPolice()))
				return true;

			if (v.HasCommand("FlyTo") && !v.IsOnGround())
				return false;
		}
		return false;
	}

	void PushActions(GameObject *Caller, Actor *Target, int childID)
	{
		Vector TargetPos = Target->GetTargetPoint(Caller, TARGET_EQUIPMENTDOOR);
		Caller->PushActionMove(ACTION_NEWLIST, TargetPos);
		Caller->PushActionTurnTo(ACTION_APPEND, Target);
		Caller->PushActionGetEquipment(ACTION_APPEND, Target, EQUIP_NONE);
		if (Target->HasName(NAME_CONE))
			Caller->PushActionExecuteCommand(ACTION_APPEND, DUMMY_CONE, Target, 3, false);
		else
			Caller->PushActionExecuteCommand(ACTION_APPEND, DUMMY_CONE, Target, 1, false);
	}
};


object PcmdTrafficConePlace : CommandScript
{
	
	PcmdTrafficConePlace()
	{
    	SetIcon("trafficconeplace");
    	SetCursor("trafficconeplace");
 		SetGroupID(DummyGroup);
 		SetGroupLeader(true);
 		SetRestrictions(RESTRICT_SELFEXECUTE);
	}

 	bool CheckPossible(GameObject *Caller)
 	{
 		if (!Caller->IsValid())
 			return false;
 
 		if (Caller->GetType() == ACTOR_PERSON)
 		{
 			return Caller->HasCommand("Dummy3Cones") || Caller->HasCommand("Dummy2Cones")|| Caller->HasCommand("Dummy1Cone");
 		}
 
 		return false;
 	}
 
 	bool CheckTarget(GameObject *Caller, Actor *Target, int childID)
 	{
 		if (!Caller->IsValid() || !Target->IsValid() || Target->GetID() != Caller->GetID())
 			return false;
 
 		if (Caller->GetType() == ACTOR_PERSON)
 		{
 			return Caller->HasCommand("Dummy3Cones") || Caller->HasCommand("Dummy2Cones")|| Caller->HasCommand("Dummy1Cone");
 		}
 
 		return true;
 	}

	void PushActions(GameObject *Caller, Actor *Target, int childID)
	{
		if (Target->HasName(NAME_CONE))
		{
			Caller->PushActionExecuteCommand(ACTION_APPEND, DUMMY_CONE, Target, 3, false);
			return;
		}
		Person p(Caller);
		Caller->PushActionWait(ACTION_NEWLIST, 0.1f);
		Vector Pos = Caller->GetPosition();
			float r[9];
			float childr[9];
		Caller->GetRotation(r[0], r[1], r[2], r[3], r[4], r[5], r[6], r[7], r[8]);
		if (Game::FindFreePosition(Caller, Pos, 1.f))
		{
                	Vehicle v;
			v = Game::CreateVehicle(OBJ_CONEGROUND, NAME_CONE);
			if (v.IsValid())
			{
				float dx = 40.f, dy = 0.f, dz = 0.f;
				Math::RotateVector(dx, dy, dz, r);
				Math::EulerToMatrix(0.0f, 0.f, 0.f, childr);
				Math::MultiplyMatrices(childr, r);
				Pos = Pos + Vector(dx, dy, 0);
				v.SetRotation(childr[0], childr[1], childr[2], childr[3], childr[4], childr[5], childr[6], childr[7], childr[8]);
				v.SetPosition(Pos);
				v.UpdatePlacement();
			}
			v.SetPlayerMP(p.GetPlayerMP());
			if(Input::LShiftPressed())
				v.PushActionRedirect(ACTION_NEWLIST);
			v.SetSelectable(false);
		}
		Caller->PushActionInterruptAnim(ACTION_NEWLIST, "getsmallobj", 2.5, true);
		if(Caller->HasCommand(DUMMY_3CONES))
		{
			Caller->RemoveCommand(DUMMY_3CONES);
			Caller->AssignCommand(DUMMY_2CONES);
		}
		else if(Caller->HasCommand(DUMMY_2CONES))
		{
			Caller->RemoveCommand(DUMMY_2CONES);
			Caller->AssignCommand(DUMMY_1CONE);
		}
		else if(Caller->HasCommand(DUMMY_1CONE))
		{
			Caller->RemoveCommand(DUMMY_1CONE);
			Caller->PushActionExecuteCommand(ACTION_APPEND, DUMMY_CONE, Target, 2, false);
		}
	}
};

object DummyTrafficCone : CommandScript
{
	DummyTrafficCone()
	{
 		SetGroupID(DummyGroup);
	}

 	bool CheckGroupVisibility(GameObject *Caller)
 	{
 		return false;
 	}
 
 	bool CheckPossible(GameObject *Caller)
 	{
 		return false;
 	} 
 
 	bool CheckTarget(GameObject *Caller, Actor *Target, int childID)
 	{
 		return false;
 	}

	void PushActions(GameObject *Caller, Actor *Target, int childID)
	{
		if(childID == 1)
		{
			Person p(Caller);
			p.PlaceObjectInRightHand(OBJ_CONE);
			p.PushActionSwitchAnim(ACTION_APPEND, "idleequipped2");
			p.AssignCommand(DUMMY_3CONES);
			if(p.HasCommand(DUMMY_2CONES))
				p.RemoveCommand(DUMMY_2CONES);
			if(p.HasCommand(DUMMY_1CONE))
				p.RemoveCommand(DUMMY_1CONE);

			Vehicle v(Target);
			v.PlayAnimOpenDoor(DAT_EQUIPMENT, 0.6f, Caller);
			v.PlayAnimCloseDoor(DAT_EQUIPMENT, 0.6f, Caller);
		}
		if(childID == 2)
		{
			Person p(Caller);
			p.RemoveObjectInRightHand();
			
			if(p.HasCommand(DUMMY_3CONES))
				p.RemoveCommand(DUMMY_3CONES);
			if(p.HasCommand(DUMMY_2CONES))
				p.RemoveCommand(DUMMY_2CONES);
			if(p.HasCommand(DUMMY_1CONE))
				p.RemoveCommand(DUMMY_1CONE);
		}
		if(childID == 3)
		{
			Person p(Caller);
			if(p.HasCommand(DUMMY_2CONES))
			{
				p.RemoveCommand(DUMMY_2CONES);
				p.AssignCommand(DUMMY_3CONES);
			}
			else if(p.HasCommand(DUMMY_1CONE))
			{
				p.RemoveCommand(DUMMY_1CONE);
				p.AssignCommand(DUMMY_2CONES);
			} else
			{
				p.AssignCommand(DUMMY_1CONE);
				p.PlaceObjectInRightHand(OBJ_CONE);
				p.PushActionInterruptAnim(ACTION_NEWLIST, "getsmallobj", 2.5, true);
				p.PushActionSwitchAnim(ACTION_APPEND, "idleequipped2");
			}
 			Vehicle v(Target);
			v.PushActionDeleteOwner(ACTION_NEWLIST);
		}
	}
};

object Dummy3Cones : CommandScript
{
	Dummy3Cones()
	{
		SetGroupID(DummyGroup);
	}

	bool CheckTarget(GameObject *Caller, Actor *Target, int childID)
	{
		return false;
	}

  	void PushActions(GameObject *Caller, Actor *Target, int childID)
	{
	}
};

object Dummy2Cones : CommandScript
{
	Dummy2Cones()
	{
		SetGroupID(DummyGroup);
	}

	bool CheckTarget(GameObject *Caller, Actor *Target, int childID)
	{
		return false;
	}

  	void PushActions(GameObject *Caller, Actor *Target, int childID)
	{
	}
};

object Dummy1Cone : CommandScript
{
	Dummy1Cone()
	{
		SetGroupID(DummyGroup);
	}

	bool CheckTarget(GameObject *Caller, Actor *Target, int childID)
	{
		return false;
	}

  	void PushActions(GameObject *Caller, Actor *Target, int childID)
	{
	}
};