//Fachzug 22 Script//
//Frei verwendbar, solang diese Kommentare erhalten bleiben!//
//Fachzug 22 Script//

object auto_aufbrechen : CommandScript
{
	auto_aufbrechen()
	{
		SetCursor("auto_aufbrechen");
		SetIcon("auto_aufbrechen");
		SetValidTargets(ACTOR_VEHICLE);
		SetRestrictions(RESTRICT_NOTDESTROYED);
	}

	bool CheckTarget(GameObject *Caller, Actor *Target, int childID)
	{
		if(!Caller->IsValid() || !Target || !Target->IsValid() || Target->GetType()!=ACTOR_VEHICLE)
			return false;
			
	Vehicle v(Target);
	
		if(!v.GetVehicleType()==VT_NOSQUAD  || !v.GetVehicleType()==VT_POLICE_GETAWAY)
			return false;
		
	return true;
	}

	void PushActions(GameObject *Caller, Actor *Target, int childID)
	{
		Vehicle v(Target);
		Person p(Caller);
		Vector TargetPos;
		
		TargetPos = v.GetPosition();
		
		//Zum Fahrzeug hingehen
			p.PushActionMove(ACTION_NEWLIST, TargetPos);
			p.PushActionTurnTo(ACTION_APPEND, Target);

			if(!v.HasCommand("MoveTo"))				//Wenn das Auto bereits geknackt wurde kann man wieder einsteigen ohne zu warten.
				{
				if(childID == 0)
					{
				//Animation zum "knacken" ändern und warten.
					p.PushActionSwitchAnim(ACTION_APPEND,"useobjmid");
					p.PushActionWait(ACTION_APPEND, 30.0f);	//"Knackdauer" -> je geringer der Wert (Standard 30) desto kürzer die Zeit bis das Auto offen ist.
					v.PushActionExecuteCommand(ACTION_APPEND, "auto_aufbrechen", Target, 1, false);
					}

				if(childID == 1)
					{
				//Parkposition merken//
					GameObject mDummy =  Game::CreateObject("mod:Prototypes/Objects/Misc/empty.e4p", "parkhilfe");
					mDummy.Hide();
					mDummy.SetPosition(TargetPos);
					float r[9];
					v.GetRotation(r[0],r[1],r[2],r[3],r[4],r[5],r[6],r[7],r[8]);
					mDummy.SetRotation(r[0],r[1],r[2],r[3],r[4],r[5],r[6],r[7],r[8]);
					int id = Math::rand();
					v.SetUserData(id);
					mDummy.SetUserData(id);
					

				//Als Squad deklarieren, zwei Sitzplätze aktiveren und nötige Commands hinzufügen.			
					v.SetVehicleRole(VT_POLICE_GETAWAY);
					v.SetMaxPassengers(2);
					v.AssignCommand("MoveTo");
					v.AssignCommand("EmptyCar");
					v.AssignCommand("VCmdWarningLights");
					v.AssignCommand("auto_parken");
					}
				}
				
		//Ins Auto einsteigen
			p.PushActionEnterCar(ACTION_APPEND, Target);
	}
};

object auto_parken : CommandScript
{
	auto_parken()
	{
		SetCursor("auto_parken");
		SetIcon("auto_parken");
	}

	bool CheckPossible(GameObject *Caller)
	{
	Vehicle v(Caller);
	
		PersonList pl = v.GetPassengers();
		if (v.GetFreePassengers() > 0 && pl.GetNumPersons() == 0)
			return false;
			
	return true;
	}
	
	bool CheckTarget(GameObject *Caller, Actor *Target, int childID)
	{	
	return true;
	}

	void PushActions(GameObject *Caller, Actor *Target, int childID)
	{
		Vehicle v(Caller);
		int id = Caller->GetUserData();
		GameObjectList ol;
		GameObject o;
		Vector TargetPos;
		PersonList pl;
		Person p;
		float r[9];

		ol = Game::GetGameObjects("parkhilfe");

		for(int i=0; i < ol.GetNumObjects(); i++)
			if(ol.GetObject(i)->GetUserData() == id)
				o = ol.GetObject(i);

		GameObject obj(o);
		TargetPos = obj.GetPosition();

		if(childID == 0)
			{
			v.PushActionMove(ACTION_NEWLIST, TargetPos);
			v.PushActionExecuteCommand(ACTION_APPEND, "auto_parken", Target, 1, false);
			}

		if(childID == 1)
			{
			o.GetRotation(r[0],r[1],r[2],r[3],r[4],r[5],r[6],r[7],r[8]);
			v.SetRotation(r[0],r[1],r[2],r[3],r[4],r[5],r[6],r[7],r[8]);
		//Wieder als ZivilFahrzeug setzen
			pl = v.GetPassengers();
				for(int i=0; i < pl.GetNumPersons(); i++)
				{
					p = pl.GetPerson(i);
					p.PushActionLeaveCar(ACTION_APPEND, Caller);
				}
			v.SetVehicleRole(VT_NOSQUAD);
			v.SetMaxPassengers(0);
			v.RemoveCommand("EmptyCar");
			v.RemoveCommand("VCmdWarningLights");
			v.RemoveCommand("auto_parken");
			}
	}
};