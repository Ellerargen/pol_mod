//Festnahme mit Waffe by Woltep
//v.1.1

const char DUMMY_ARREST[] = "DUMMYArrest";
const char ARREST[] = "Arrest";
const char DUMMY_SLEEPER1[] = "DummySleeper1";
const char DUMMY_SLEEPER2[] = "DummySleeper2";


object Arrest2 : CommandScript
{
	Arrest2()
	{
		SetValidTargets(ACTOR_PERSON);
		SetGroupID(CGROUP_ARREST);
		SetIcon(ARREST);
		SetCursor(ARREST);
		SetPossibleEquipment(EQUIP_PISTOL);
		SetRestrictions(RESTRICT_NOTINJURED | RESTRICT_NOTARRESTED | RESTRICT_NOTLINKED);
		SetGroupLeader(true);
		SetPossibleCallers(ACTOR_PERSON);
		SetPossibleExists(CPE_NONIJURED_PERSON);
		SetPriority(800);
	}


	bool CheckPossible(GameObject *Caller)
	{
		/*if(!Caller->IsValid() || Caller->GetType() != ACTOR_PERSON)
			return false;*/
		Person p(Caller);
		if(!p.IsValid() || p.IsLinkedWithPerson() || p.IsCarryingPerson() || p.GetEnteredCarID() != -1 || p.IsPhysicsSimulationEnabled())
			return false;
		return true;
	}

	bool CheckGroupVisibility(GameObject *Caller)
	{
		if(!Caller->IsValid() || Caller->GetType() != ACTOR_PERSON)
			return false;
		Person p(Caller);
		return !p.IsLinkedWithPerson();
	}
	
	bool CheckTarget(GameObject *Caller, Actor *Target, int childID)
	{
		if(!Caller->IsValid() ||  Caller->IsEquipped() && Caller->GetEquipment() != EQUIP_PISTOL || !Target->IsValid() || Target->GetID() == Caller->GetID() )
			return false;

		Person p(Caller);
		if(!p.IsValid() || p.IsLinkedWithPerson() || p.IsCarryingPerson() || p.GetEnteredCarID() != -1)
			return false;

		Person t(Target);
		if(!t.IsValid() || t.GetState() != PERSONSTATE_NORMAL)
			return false;
			
		if(t.GetEnteredHouseID() != -1 && p.GetEnteredHouseID() == -1)
		                         return false;

		if(p.GetEnteredHouseID() != -1 && t.GetEnteredHouseID() == -1)
		                         return false;


		return (t.GetRole() != ROLE_ANIMAL && t.GetRole() != ROLE_SQUAD);
	}

	void PushActions(GameObject *Caller, Actor *Target, int childID)
	{

	        if (Caller->GetEquipment() == EQUIP_PISTOL) {
                   

                   Person t(Target);
		Vector CmdPos, TargetPos;
		CmdPos = Game::GetCommandPos();
		TargetPos = CmdPos;

		Person p(Caller);
		if (!p.IsValid())
			return;
		if (p.GetThrowPosition(TargetPos))
		{
			Caller->PushActionMove(ACTION_NEWLIST, TargetPos);
			Caller->PushActionTurnTo(ACTION_APPEND, CmdPos);
		} 
		 else
			Caller->PushActionTurnTo(ACTION_NEWLIST, CmdPos);

	       Caller->PushActionSwitchAnim(ACTION_APPEND, "pistoltarget");
	       Caller->PushActionExecuteCommand(ACTION_APPEND, DUMMY_ARREST, Target, 0, false);


              }

	}
};



                       
object DUMMYArrest : CommandScript
{
	DUMMYArrest()
	{
	}

	bool CheckPossible(GameObject *Caller)
	{
	}

	bool CheckTarget(GameObject *Caller, Actor *Target, int childID)
	{
	}

	void PushActions(GameObject *Caller, Actor *Target, int childID)
	{
	   int Chance;
	   Person t(Target);
	   Person p(Caller);
	   
	   p.SetShootPower(300.);
	   //p.SetShootFrequency(float freq_);

	   if(t.GetRole() != ROLE_GANGSTER)                                         //Zivilpersonen ergeben sich immer!
                          {
                          t.ClearActions();
                          t.RemoveObjectPath();
                          t.PushActionSwitchAnim(ACTION_APPEND, "hostage_down");
                          }
           else
                {
                          
                          if(t.GetBehaviour() == BEHAVIOUR_GANGSTER_ATTACKALL)
                          {
                                     p.PushActionShoot(ACTION_APPEND, Target);      // zu Verzweifelt um sich zu ergeben!
                          }

                          if(t.GetBehaviour() == BEHAVIOUR_GANGSTER_GUARDHOSTAGE)
                          {
                                     Chance = Math::rand() % 2;

		                               if (Chance == 0)
		                               {                    // 1/2 Chance das Gangster sich ergibt
			                             t.ClearActions();
			                             t.SetBehaviour(BEHAVIOUR_GANGSTER_CIVILARMED);
			                             t.SetDisableGangsterSymbol(false);
                                                     t.RemoveObjectPath();
                                                     t.PushActionSwitchAnim(ACTION_APPEND, "hostage_down");
                                                     t.PushActionWait(ACTION_APPEND, 20.0f);
                                                     t.PushActionExecuteCommand(ACTION_APPEND, DUMMY_SLEEPER1, Target, 0, false);
		                                }
                                                else
                                                {
                                                     t.SetBehaviour(BEHAVIOUR_GANGSTER_GUARDHOSTAGE);
                                                     p.PushActionShoot(ACTION_APPEND, Target);
                                                }
                          }
                            
                          if(t.GetBehaviour() == BEHAVIOUR_GANGSTER_CIVILUNARMED)
                          {
                                     Chance = Math::rand() % 2;

		                               if (Chance == 0)
		                               {                    // 1/2 Chance das Gangster sich ergibt
			                             t.ClearActions();
			                             t.SetBehaviour(BEHAVIOUR_GANGSTER_CIVILARMED);
			                             t.SetDisableGangsterSymbol(false);
                                                     t.RemoveObjectPath();
                                                     t.PushActionSwitchAnim(ACTION_APPEND, "hostage_down");
                                                     t.PushActionWait(ACTION_APPEND, 20.0f);
                                                     t.PushActionExecuteCommand(ACTION_APPEND, DUMMY_SLEEPER1, Target, 0, false);
		                                }
                                                else
                                                {
                                                     t.SetBehaviour(BEHAVIOUR_GANGSTER_CIVILUNARMED);
                                                     p.PushActionShoot(ACTION_APPEND, Target);
                                                }
                          }

                          if(t.GetBehaviour() == BEHAVIOUR_GANGSTER_GUARDPASSAGE)
                          {
                                       Chance = Math::rand() % 2;

		                               if (Chance == 0)
		                               {                    // 1/2 Chance das Gangster sich ergibt
			                             t.ClearActions();
			                             t.SetBehaviour(BEHAVIOUR_GANGSTER_CIVILARMED);
			                             t.SetDisableGangsterSymbol(false);
                                                     t.RemoveObjectPath();
                                                     t.PushActionSwitchAnim(ACTION_APPEND, "hostage_down");
                                                     t.PushActionWait(ACTION_APPEND, 20.0f);
                                                     t.PushActionExecuteCommand(ACTION_APPEND, DUMMY_SLEEPER1, Target, 0, false);
		                                }
                                                else
                                                {
                                                     t.SetBehaviour(BEHAVIOUR_GANGSTER_GUARDPASSAGE);
                                                     p.PushActionShoot(ACTION_APPEND, Target);
                                                }
                          }

                          if(t.GetBehaviour() == BEHAVIOUR_GANGSTER_THROWSTONES || t.GetBehaviour() == BEHAVIOUR_GANGSTER_THROWMOLOTOV){
                                        return;
                            }

                          if(t.GetBehaviour() == BEHAVIOUR_GANGSTER_FISTFIGHT)
                          {
                                          Chance = Math::rand() % 3;

		                               if (Chance == 0)
		                                {                    // 1/3 Chance das Gangster sich ergibt
			                             t.ClearActions();
			                             t.SetBehaviour(BEHAVIOUR_GANGSTER_CIVILARMED);
			                             t.SetDisableGangsterSymbol(false);
                                                     t.RemoveObjectPath();
                                                     t.PushActionSwitchAnim(ACTION_APPEND, "hostage_down");
                                                     t.PushActionWait(ACTION_APPEND, 20.0f);
                                                     t.PushActionExecuteCommand(ACTION_APPEND, DUMMY_SLEEPER2, Target, 0, false);
		                                }

		                               if (Chance == 1)
                                                {
                                                   t.SetFleeing(true);
				                   if (!t.HasObjectPath(NULL))
				                        {
					                        t.SetBehaviour(BEHAVIOUR_GANGSTER_FISTFIGHT);
					                        t.PushActionMove(ACTION_NEWLIST, &p, TARGET_TOUCHPERSON);
					                        t.PushActionFistFight(ACTION_APPEND, &p, true);
				                        }
				                }
                                                if (Chance == 2)
                                                {
                                                     t.SetBehaviour(BEHAVIOUR_GANGSTER_FISTFIGHT);
                                                     t.PushActionMove(ACTION_NEWLIST, &p, TARGET_TOUCHPERSON);
					             t.PushActionFistFight(ACTION_APPEND, &p, true);
					             p.PushActionShoot(ACTION_APPEND, Target);
                                                }

                          }

                          if(t.GetBehaviour() == BEHAVIOUR_GANGSTER_ATTACKSQUAD || t.GetBehaviour() == BEHAVIOUR_GANGSTER_ATTACKSQUAD_SMART)

                          {
                                        Chance = Math::rand() % 2;

		                               if (Chance == 0)
		                                                {                    // 1/2 Chance das Gangster sich ergibt
			                             t.ClearActions();
			                             t.SetBehaviour(BEHAVIOUR_GANGSTER_CIVILARMED);
			                             t.SetDisableGangsterSymbol(false);
                                                     t.RemoveObjectPath();
                                                     t.PushActionSwitchAnim(ACTION_APPEND, "hostage_down");
                                                     t.PushActionWait(ACTION_APPEND, 20.0f);
                                                     t.PushActionExecuteCommand(ACTION_APPEND, DUMMY_SLEEPER1, Target, 0, false);
		                                             }
                                                else
                                                {
                                                     t.SetBehaviour(BEHAVIOUR_GANGSTER_ATTACKSQUAD);
                                                     p.PushActionShoot(ACTION_APPEND, Target);
                                                }
		           }



             }

	}
};







object DummySleeper1 : CommandScript
{
	DummySleeper1()
	{
	}

	bool CheckTarget(GameObject *Caller, Actor *Target, int childID)
	{
	}

	void PushActions(GameObject *Caller, Actor *Target, int childID)
	{
          Person t(Target);
          t.SetBehaviour(BEHAVIOUR_GANGSTER_ATTACKSQUAD);
	}
};

object DummySleeper2 : CommandScript
{
	DummySleeper2()
	{
	}

	bool CheckTarget(GameObject *Caller, Actor *Target, int childID)
	{
	}

	void PushActions(GameObject *Caller, Actor *Target, int childID)
	{
           Person t(Target);
           t.SetBehaviour(BEHAVIOUR_GANGSTER_FISTFIGHT);
	}
};

